import path from 'path'
import fse from 'fs-extra'
import inquirer from 'inquirer'

import { log } from './log'
import { documentFile, rxSubdirectory, swaggerFile } from './paths'
import * as rx from '../index'

/**
 * Generates an API specification in the specified directory from the specified document file.
 * @param directory the absolute path of the directory to use
 * @param file the path of the document file to use
 */
export const generate = async (directory: string, file: string): Promise<void> => {
  // Check if the corresponding swagger file for the provided document file exists 
  let exists = await fse.pathExists(swaggerFile(directory, file))
  if (exists) {
    log('message', 'The swagger.json file already exists. The generate command will overwrite this file.')
    let { proceed } = await inquirer.prompt<{ proceed: boolean }>([
      {
        name: 'proceed',
        message: 'Are you sure you would like to continue?',
        type: 'confirm',
        default: false
      }
    ])
    if (!proceed) {
      log('message', 'No changes made.')
      return
    }
  }
  // Read the document
  let document = (await fse.readFile(documentFile(file))).toString()
  // Generate the API specification from the document
  let tokens = await rx.tokens(document)
  let specification = await rx.specification(await rx.schemas(tokens), await rx.title(tokens))
  // Ensure the output .rx/<file>/ directory is created
  await fse.ensureDir(rxSubdirectory(directory, file))
  // Write a .gitignore to ensure generated files are not committed
  let gitignore = '# Ignoring this directory (generated by resource-x)\n*\n# Except for the deploy.json\n!deploy.json\n'
  await fse.writeFile(path.join(rxSubdirectory(directory, file), '.gitignore'), gitignore)
  // Write the API specification object to the file-specific directory
  await fse.writeFile(swaggerFile(directory, file), JSON.stringify(specification, null, 2))
  log('success', 'Generated the swagger.json file successfully.')
  log('info', `path: ${swaggerFile(directory, file)}`)
}
